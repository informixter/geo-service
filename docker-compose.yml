version: '3.5'

services:
  postgres:
    environment:
      PGDATA: /data/postgres
      POSTGRES_DB: demo
      POSTGRES_PASSWORD: demo
      POSTGRES_USER: demo
    hostname: postgres
    image: library/postgres:11-alpine
    networks:
      backend: null
    ports:
      - published: 5432
        target: 5432
    restart: unless-stopped
    volumes:
      - ./tmp/pgdata:/data/postgres:rw
      - ./tmp/backup:/backup_data:rw
#  snapserver:
#    build:
#      context: "server"
#      dockerfile: "Dockerfile"
#    ports:
#      - 8080:3000
#    networks:
#      - backend
#    restart: always
  api:
    command:
      - /usr/local/bin/php
      - /app/artisan
      - serve
      - --port=8080
      - --host=0.0.0.0
    environment:
      APP_KEY: "base64:Z/MMQc23MXBrfMVDZ+1Bwm+1uO6r/v5RtKS7R1Ctai0="
      APP_NAME: "Laravel"
      APP_ENV: "local"
      APP_DEBUG: "true"
      APP_URL: "http://81.163.30.59"
      LOG_CHANNEL: "stack"
      LOG_LEVEL: "debug"
      DB_CONNECTION: "pgsql"
      DB_HOST: "postgres"
      DB_PORT: "5432"
      DB_DATABASE: demo
      DB_USERNAME: demo
      DB_PASSWORD: demo
      BROADCAST_DRIVER: "log"
      CACHE_DRIVER: "file"
      FILESYSTEM_DRIVER: "local"
      QUEUE_CONNECTION: "sync"
      SESSION_DRIVER: "file"
      SESSION_LIFETIME: "120"
      MEMCACHED_HOST: "127.0.0.1"
      REDIS_HOST: "127.0.0.1"
      REDIS_PASSWORD: "null"
      REDIS_PORT: "6379"
      MAIL_MAILER: "smtp"
      MAIL_HOST: "mailhog"
      MAIL_PORT: "1025"
      MAIL_USERNAME: "null"
      MAIL_PASSWORD: "null"
      MAIL_ENCRYPTION: "null"
      MAIL_FROM_ADDRESS: "null"
      AWS_ACCESS_KEY_ID: ""
      AWS_SECRET_ACCESS_KEY: ""
      AWS_DEFAULT_REGION: "us-east-1"
      AWS_BUCKET: ""
      AWS_USE_PATH_STYLE_ENDPOINT: "false"
      PUSHER_APP_ID: ""
      PUSHER_APP_KEY: ""
      PUSHER_APP_SECRET: ""
      PUSHER_APP_CLUSTER: "mt1"
    build:
      dockerfile: Dockerfile
      context: ./api
    volumes:
      - ./api:/app
    networks:
      backend: null
    ports:
      - published: 8080
        target: 8080
    stdin_open: true # docker run -i
networks:
    backend:
        driver: bridge      
